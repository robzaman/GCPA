import { useEffect, useState } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer
} from "recharts";

const sources = [
  {
    name: "Google News",
    url: "https://news.google.com/rss/search?q=ukraine+war"
  },
  {
    name: "The Guardian",
    url: "https://www.theguardian.com/world/ukraine/rss"
  },
  {
    name: "Deutsche Welle (DW)",
    url: "https://rss.dw.com/rdf/rss-en-ukraine"
  },
  {
    name: "France 24",
    url: "https://www.france24.com/en/tag/ukraine/rss"
  },
  {
    name: "The Japan Times",
    url: "https://www.japantimes.co.jp/news/world/feed/"
  }
];

export default function UkraineNewsDashboard() {
  const [articlesWithImages, setArticlesWithImages] = useState([]);
  const [articlesWithoutImages, setArticlesWithoutImages] = useState([]);

  useEffect(() => {
    async function fetchNews() {
      const withImages = [];
      const withoutImages = [];
      for (const source of sources) {
        const proxyUrl = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(
          source.url
        )}`;
        try {
          const response = await fetch(proxyUrl);
          const data = await response.json();
          if (data.status === "ok") {
            const filteredItems = data.items.filter(
              (item) =>
                item.title.toLowerCase().includes("ukraine") ||
                (item.description &&
                  item.description.toLowerCase().includes("ukraine"))
            );
            filteredItems.forEach((item) => {
              const article = { ...item, source: source.name };
              if (article.thumbnail) {
                withImages.push(article);
              } else {
                withoutImages.push(article);
              }
            });
          }
        } catch (err) {
          console.error(`Error loading ${source.name}`, err);
        }
      }
      setArticlesWithImages(withImages);
      setArticlesWithoutImages(withoutImages);
    }

    fetchNews();
    const interval = setInterval(fetchNews, 3600000);
    return () => clearInterval(interval);
  }, []);

  const allArticles = [...articlesWithImages, ...articlesWithoutImages];

  const timelineData = allArticles.reduce((acc, article) => {
    const date = new Date(article.pubDate).toISOString().split("T")[0];
    acc[date] = (acc[date] || 0) + 1;
    return acc;
  }, {});

  const chartData = Object.keys(timelineData)
    .map((date) => ({
      date,
      articles: timelineData[date]
    }))
    .sort((a, b) => new Date(a.date) - new Date(b.date));

  return (
    <div
      style={{ fontFamily: "Avenir Light, sans-serif", fontSize: "8pt", padding: "20px", backgroundColor: "#f9f9f9" }}
    >
      <h1 style={{ fontSize: "1.25rem", marginBottom: "1rem" }}>Ukraine War News Dashboard</h1>

      <div style={{ backgroundColor: "#fff", padding: "16px", borderRadius: "16px", boxShadow: "0 2px 8px rgba(0,0,0,0.05)", marginBottom: "24px" }}>
        <h2 style={{ fontSize: "1rem", marginBottom: "8px" }}>Timeline of Articles</h2>
        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={chartData}>
            <XAxis dataKey="date" />
            <YAxis allowDecimals={false} />
            <Tooltip />
            <Line
              type="monotone"
              dataKey="articles"
              stroke="#8884d8"
              strokeWidth={2}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>

      {[...articlesWithImages, ...articlesWithoutImages].map((article, index) => (
        <div
          key={index}
          style={{
            display: "flex",
            flexDirection: "row",
            gap: "16px",
            backgroundColor: "#fff",
            padding: "16px",
            borderRadius: "16px",
            boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
            marginBottom: "16px"
          }}
        >
          {article.thumbnail && (
            <img
              src={article.thumbnail}
              alt="Thumbnail"
              style={{ width: "128px", height: "128px", objectFit: "cover", borderRadius: "12px" }}
            />
          )}
          <div>
            <h3 style={{ fontSize: "1rem", fontWeight: "bold", marginBottom: "4px" }}>
              <a
                href={article.link}
                target="_blank"
                rel="noopener noreferrer"
                style={{ color: "#333", textDecoration: "none" }}
              >
                {article.title}
              </a>
            </h3>
            <p style={{ fontSize: "0.75rem", color: "#777" }}>
              {new Date(article.pubDate).toLocaleString()} â€“ {article.source}
            </p>
            <p style={{ fontSize: "0.875rem", marginTop: "6px" }}>{article.description}</p>
          </div>
        </div>
      ))}
    </div>
  );
}
